{"name": "test_filter_find_and_add_to_cart", "status": "broken", "statusDetails": {"message": "playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.\n=========================== logs ===========================\nwaiting for selector \"text = Checkout: Overview\"\n============================================================", "trace": "playwright = <playwright._impl._playwright.Playwright object at 0x10436a6e0>\n\n    @allure.feature('Test_filter')\n    def test_filter_find_and_add_to_cart(playwright: Playwright):\n        browser = playwright.chromium.launch()  # создаем экземпляр браузера\n        context = browser.new_context()  # создаем изолированный контекст браузера\n        context.tracing.start(screenshots=True, snapshots=True, sources=True)  # начало записи действий в браузере\n        page = context.new_page()  # создаем экземпляр закладки изолированного контекста браузера\n    \n        page.goto('https://www.saucedemo.com/')  # переходит на страницу\n    \n        page.locator('//*[@id=\"user-name\"]').fill(username_data)  # заполнение поля \"username\"\n    \n        page.locator('//*[@id=\"password\"]').fill(password_data)  # заполнение поля \"password\"\n    \n        page.locator('//*[@id=\"login-button\"]').page.keyboard.press(\n            'Enter')  # имитирует нажатие клавиши \"enter\" на кнопку \"login\"\n    \n        page.locator('data-test=product_sort_container').select_option(\n            \"lohi\")  # находит выпадающий список и кликает на элемент в нем\n    \n        page.locator('text=Sauce Labs Onesie').click()  # кликает на заголовок товара\n    \n        page.locator('.shopping_cart_link').click()  # кликает на иконку корзины\n    \n        your_cart = page.locator('text=Your Cart')  # находит заголовок страницы корзины\n        text_your_cart = your_cart.text_content()  # парсит содержимое заголовка страницы корзины\n    \n        assert text_your_cart == 'Your Cart'  # сравнивает спарсенное содержимое и ожидаемое значение\n    \n        page.locator('data-test=checkout').click()  # кликает на кнопку checkout\n    \n        page.locator('id=first-name').fill('Nick')  # заполняет поле имя\n        page.locator('id=last-name').fill('Trushnikov')  # заполняет поле фамилия\n        page.locator('id=postal-code').fill('183036')  # заполняет поле почтовый индекс\n    \n        page.locator('data-test=continue').page.keyboard.press('Enter')\n    \n        checkout_overview = page.locator(\"text = Checkout: Overview\")  # находит заголовок страницы заказа\n>       get_checkout_overview = checkout_overview.text_content()  # парсит содержимое заголовка страницы заказа\n\ntest_filter_playwright.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.10/site-packages/playwright/sync_api/_generated.py:13689: in text_content\n    self._sync(self._impl_obj.text_content(timeout=timeout))\nvenv/lib/python3.10/site-packages/playwright/_impl/_locator.py:468: in text_content\n    return await self._frame.text_content(\nvenv/lib/python3.10/site-packages/playwright/_impl/_frame.py:534: in text_content\n    return await self._channel.send(\"textContent\", locals_to_params(locals()))\nvenv/lib/python3.10/site-packages/playwright/_impl/_connection.py:43: in send\n    return await self._connection.wrap_api_call(\nvenv/lib/python3.10/site-packages/playwright/_impl/_connection.py:387: in wrap_api_call\n    return await cb()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x104369c30>, method = 'textContent', params = {'selector': 'text = Checkout: Overview', 'strict': True}\nreturn_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.TimeoutError: Timeout 30000ms exceeded.\nE       =========================== logs ===========================\nE       waiting for selector \"text = Checkout: Overview\"\nE       ============================================================\n\nvenv/lib/python3.10/site-packages/playwright/_impl/_connection.py:78: TimeoutError"}, "start": 1663521744543, "stop": 1663521775699, "uuid": "f4ed2c87-1ff4-4af8-9fee-0b43e95120d9", "historyId": "f9cde0d3c9f549ef866fbfde81aae9a4", "testCaseId": "ad66d64db22bffe5dff4a442700b4c10", "fullName": "test_filter_playwright#test_filter_find_and_add_to_cart", "labels": [{"name": "feature", "value": "Test_filter"}, {"name": "suite", "value": "test_filter_playwright"}, {"name": "host", "value": "MacBook-Air-Nikolaj.local"}, {"name": "thread", "value": "6255-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_filter_playwright"}]}